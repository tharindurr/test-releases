name: Pre-Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create GitHub App token
      id: create-app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Get GitHub App User ID
      id: get-user-id
      run: echo "user-id=$(gh api "/users/${{ steps.create-app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ steps.create-app-token.outputs.token }}

    - shell: bash
      run: |
        git config --global user.name '${{ steps.create-app-token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.create-app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

    - name: Get latest tag
      id: get-latest-version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` --match '[0-9]*.[0-9]*.[0-9]*' --abbrev=0) || true
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="0.1.0"
        fi
        echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

    - name: Determine new prerelease version
      id: determine-version
      run: |
        if [[ "${{ steps.get-latest-version.outputs.latest_tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-prerelease\.[0-9]+$ ]]; then
          BASE_VERSION=$(echo "${{ steps.get-latest-version.outputs.latest_tag }}" | sed -E 's/-prerelease\.[0-9]+$//')
          PREVIOUS_NUMBER=$(echo "${{ steps.get-latest-version.outputs.latest_tag }}" | sed -E 's/.*-prerelease\.([0-9]+)$/\1/')
          NEW_NUMBER=$((PREVIOUS_NUMBER + 1))
          NEW_VERSION="${BASE_VERSION}-prerelease.$NEW_NUMBER"
        else
          NEW_VERSION="${{ steps.get-latest-version.outputs.latest_tag }}-prerelease.1"
        fi
        echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

    - name: Create new tag
      env:
        GITHUB_TOKEN: ${{ steps.create-app-token.outputs.token }}
      run: |
        git tag ${{ steps.determine-version.outputs.new_version }}
        git push origin --tags

    - name: Create GitHub release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.create-app-token.outputs.token }}
      run: |
        gh release create ${{ steps.determine-version.outputs.new_version }} --title "Pre-Release ${{ steps.determine-version.outputs.new_version }}" --notes "Pre-Release ${{ steps.determine-version.outputs.new_version }}" --prerelease